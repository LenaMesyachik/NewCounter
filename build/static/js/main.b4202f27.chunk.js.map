{"version":3,"sources":["Button.tsx","Display.tsx","Input.tsx","Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","className","disabled","onClick","callback","name","Display","counter","error","addCounter","nullCounter","maxCounter","startCounter","n","incStyle","resetStyle","Input","type","value","onChange","e","callBack","currentTarget","valueAsNumber","Settings","setValue","ChangeError","setStartCounter","setMaxCounter","disabledStyle","App","useState","setCounter","setError","useEffect","valueString","localStorage","getItem","newValue","JSON","parse","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4202f27.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nexport type PropsButtonType = {\n    name: string\n    callback: () => void\n    disabled?: boolean\n    className?:string\n}\nexport const Button = (props: PropsButtonType) => {\n\n    return (\n        <>\n            <button  className={props.className} disabled= {props.disabled} onClick={props.callback}>{props.name}</button>\n        </>\n    );\n}\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Button} from \"./Button\";\n\n\nexport type DisplayPropsType = {\n    counter: number,\n    addCounter: () => void\n    nullCounter: () => void\n    maxCounter: number\n    startCounter: number\n    setCounter:(value:number)=>void\n    error:string\n}\nexport const Display = ({counter,error, addCounter, nullCounter, maxCounter, startCounter}: DisplayPropsType) => {\n\n    const disabled = (n: number) => counter === n;\n    const incStyle = counter === maxCounter\n    const resetStyle = counter === startCounter\n\n\n/*    const setLocalStorageHandler = () => {\n        localStorage.setItem('counterValue', JSON.stringify(counter))\n        localStorage.setItem('counterValue+1', JSON.stringify(counter+1))\n    }\n    const getFromLocalStorageHandler = () => {\n        debugger\n        let valueString=localStorage.getItem('counterValue')\n        if (valueString) {\n            debugger\n        let newValue=JSON.parse(valueString)\n        setCounter(newValue)\n    }}\n    const clearLocalStorageHandler=()=>{\n        localStorage.clear()\n        setCounter(minCounter)\n    }\n    const removeLocalStorageHandler=()=>{\n        localStorage.removeItem('counterValue+1')\n    }*/\n    return (\n        <div>\n\n            <div className={'body'}>\n                {error?<div className={'containerError'}>{error}</div>:<div className={'container'}>{counter}</div>}\n                <Button disabled={disabled(maxCounter)} className={incStyle ? 'active-button' : 'button'} name={'inc'}\n                        callback={addCounter}/>\n                <Button  disabled={disabled(startCounter)} className={resetStyle ? 'active-button' : 'button'}\n                        name={'reset'} callback={nullCounter}/>\n            </div>\n        </div>\n    );\n}\n","import React, {ChangeEvent} from 'react';\nimport './App.css';\n\n\nexport type InputPropsType = {\n    className?:string\n    counter:number\n    callBack:(value:number)=>void\n}\nexport const Input = ({className,...props}: InputPropsType) => {\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>)=>{props.callBack(e.currentTarget.valueAsNumber)}\n    return (\n        <div>\n                <input type='number' value={props.counter}  className={className} onChange={onChangeHandler}/>\n        </div>\n\n    );\n}\n","import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\nimport {Button} from \"./Button\";\nimport {Input} from \"./Input\";\n\n\nexport type SettingsPropsType = {\n    maxCounter:number,\n    startCounter:number,\n    setMaxCounter:(value:number)=>void\n    setStartCounter:(value:number)=>void\n    ChangeError:()=>void\n    setValue:(startCounter:number)=>void\n\n}\n\nexport const Settings = ({maxCounter,ChangeError, setValue, startCounter,setStartCounter,setMaxCounter, ...props}: SettingsPropsType) => {\n\n    const onChangeStartValue=(value:number)=>{\n        if (value)\n        setStartCounter(value)\n    }\n    const onChangeMaxValue=(value:number)=>{\n        setMaxCounter(value)\n    }\n    const setCounterValue=()=>{setValue(startCounter)}\n    const disabled = () => maxCounter === startCounter;\n    const disabledStyle=maxCounter === startCounter\n        return (\n        <div className={'body'}>\n            <div className={'container'}>\n                <div className={'Counter'}>maxCounter</div>\n                <Input className={disabledStyle ? 'inputError':'input'} counter={maxCounter} callBack={onChangeMaxValue}/>\n                <div className={'Counter'}>startCounter</div>\n                <Input className={disabledStyle ? 'inputError':'input'} counter={startCounter} callBack={onChangeStartValue} />\n            </div>\n            <Button disabled={disabled()} className={disabledStyle ? 'active-button' : 'button'}name={'set'} callback={setCounterValue} />\n        </div>\n    );\n}\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Display} from \"./Display\";\nimport {Settings} from \"./Settings\";\n\nfunction App() {\n    const [counter, setCounter] = useState<number>(0);\n    const [maxCounter, setMaxCounter] = useState<number>(0)\n    const [startCounter, setStartCounter] = useState<number>(0)\n    const [error, setError] = useState('')\n\n    const ChangeError = () => {\n        setError('Incorrect value!')\n        /*setError('')*/\n    }\n    useEffect(() => {\n        const valueString = localStorage.getItem('counterValue')\n        if (valueString) {\n            let newValue = JSON.parse(valueString)\n            setCounter(newValue)\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('counterValue', JSON.stringify(counter))\n    }, [counter])\n    const addCounter = () => {\n        if (counter < maxCounter) {\n            const newCounter = counter + 1\n            setCounter(newCounter)\n        }\n    }\n    const nullCounter = () => {\n        setCounter(startCounter)\n    }\n    const setValue = (startCounter: number) => {\n        if (startCounter !== maxCounter)\n            setCounter(startCounter)\n        else {\n            setError('Incorrect value!')\n        }\n\n    }\n    return (\n        <div className={'App'}>\n            <div><Settings ChangeError={ChangeError} setValue={setValue} maxCounter={maxCounter}\n                           startCounter={startCounter} setMaxCounter={setMaxCounter}\n                           setStartCounter={setStartCounter}/></div>\n            <div><Display counter={counter} error={error} addCounter={addCounter} nullCounter={nullCounter}\n                          maxCounter={maxCounter}\n                          startCounter={startCounter} setCounter={setCounter}/></div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}